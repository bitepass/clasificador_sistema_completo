#!/bin/bash

# Script maestro para reorganizar repositorios GitHub
# Autor: Organizador de Repositorios GitHub

echo "üéØ REORGANIZADOR MAESTRO DE REPOSITORIOS GITHUB"
echo "==============================================="
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üõ†Ô∏è  REORGANIZADOR MAESTRO DE GITHUB${NC}"
    echo ""
    echo "Este script coordina la reorganizaci√≥n completa de tus repositorios GitHub"
    echo ""
    echo -e "${YELLOW}Uso:${NC} $0 [OPCI√ìN]"
    echo ""
    echo -e "${YELLOW}Opciones:${NC}"
    echo "  --analyze              Analizar estado actual"
    echo "  --migrate-excel        Migrar proyecto Excel/CSV"
    echo "  --full-reorganize      Reorganizaci√≥n completa"
    echo "  --maintenance          Mantenimiento continuo"
    echo "  --demo                 Demostraci√≥n (solo reportes)"
    echo "  --help, -h             Mostrar esta ayuda"
    echo ""
    echo -e "${YELLOW}Flujo recomendado:${NC}"
    echo "1. $0 --analyze          # Analizar estado actual"
    echo "2. $0 --migrate-excel    # Migrar proyecto Excel/CSV"
    echo "3. $0 --maintenance      # Configurar mantenimiento"
    echo ""
}

# Funci√≥n para mostrar progreso
show_progress() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Funci√≥n para analizar estado actual
analyze_current_state() {
    echo -e "${BLUE}üìä AN√ÅLISIS DEL ESTADO ACTUAL${NC}"
    echo "================================="
    echo ""
    
    if [[ -f "analyze_branches.sh" ]]; then
        show_progress "Ejecutando an√°lisis de ramas..."
        ./analyze_branches.sh
        echo ""
    else
        show_error "Script analyze_branches.sh no encontrado"
        return 1
    fi
    
    show_progress "An√°lisis completado"
}

# Funci√≥n para migrar proyecto Excel/CSV
migrate_excel_project() {
    echo -e "${BLUE}üîÑ MIGRACI√ìN DEL PROYECTO EXCEL/CSV${NC}"
    echo "==================================="
    echo ""
    
    if [[ -f "migrate_excel_project.sh" ]]; then
        show_warning "ATENCI√ìN: Este proceso migrar√° el proyecto Excel/CSV a un repositorio independiente"
        echo ""
        echo "Pasos a seguir:"
        echo "1. Crear nuevo repositorio en GitHub: excel-csv-search-tool"
        echo "2. Ejecutar migraci√≥n autom√°tica"
        echo "3. Limpiar ramas originales"
        echo ""
        
        read -p "¬øDeseas continuar con la migraci√≥n? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            show_progress "Iniciando proceso de migraci√≥n..."
            ./migrate_excel_project.sh
        else
            show_warning "Migraci√≥n cancelada"
        fi
    else
        show_error "Script migrate_excel_project.sh no encontrado"
        return 1
    fi
}

# Funci√≥n para reorganizaci√≥n completa
full_reorganize() {
    echo -e "${BLUE}üéØ REORGANIZACI√ìN COMPLETA${NC}"
    echo "=========================="
    echo ""
    
    show_progress "Paso 1: An√°lisis del estado actual"
    analyze_current_state
    
    echo ""
    show_progress "Paso 2: Migraci√≥n del proyecto Excel/CSV"
    read -p "¬øProceder con la migraci√≥n del proyecto Excel/CSV? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        migrate_excel_project
    else
        show_warning "Migraci√≥n del proyecto Excel/CSV omitida"
    fi
    
    echo ""
    show_progress "Paso 3: Configuraci√≥n de mantenimiento"
    setup_maintenance
    
    echo ""
    show_progress "Reorganizaci√≥n completa finalizada"
}

# Funci√≥n para configurar mantenimiento
setup_maintenance() {
    echo -e "${BLUE}üîß CONFIGURACI√ìN DE MANTENIMIENTO${NC}"
    echo "=================================="
    echo ""
    
    if [[ -f "github_maintenance.sh" ]]; then
        show_progress "Configurando convenciones de nomenclatura..."
        ./github_maintenance.sh --setup-conventions
        
        show_progress "Generando reporte de estado..."
        ./github_maintenance.sh --report
        
        echo ""
        show_progress "Configuraci√≥n de mantenimiento completada"
        echo ""
        echo -e "${YELLOW}üí° RECOMENDACIONES DE MANTENIMIENTO:${NC}"
        echo "‚Ä¢ Ejecutar an√°lisis semanal: ./github_maintenance.sh --report"
        echo "‚Ä¢ Limpiar ramas obsoletas mensualmente: ./github_maintenance.sh --clean"
        echo "‚Ä¢ Mantenimiento completo trimestral: ./github_maintenance.sh --full-maintenance"
        
    else
        show_error "Script github_maintenance.sh no encontrado"
        return 1
    fi
}

# Funci√≥n para demostraci√≥n (solo reportes)
run_demo() {
    echo -e "${BLUE}üé¨ DEMOSTRACI√ìN DEL ORGANIZADOR${NC}"
    echo "==============================="
    echo ""
    
    show_progress "Ejecutando an√°lisis de demostraci√≥n..."
    analyze_current_state
    
    echo ""
    show_progress "Generando reporte de estado..."
    if [[ -f "github_maintenance.sh" ]]; then
        ./github_maintenance.sh --report
    fi
    
    echo ""
    show_progress "Demostraci√≥n completada"
    echo ""
    echo -e "${YELLOW}üìã RESUMEN DE LA DEMOSTRACI√ìN:${NC}"
    echo "‚Ä¢ Se analizaron todas las ramas del repositorio"
    echo "‚Ä¢ Se identificaron proyectos separables (Excel/CSV)"
    echo "‚Ä¢ Se generaron reportes detallados"
    echo "‚Ä¢ Se proporcionaron recomendaciones de organizaci√≥n"
}

# Verificar que estamos en un repositorio Git
if [[ ! -d ".git" ]]; then
    show_error "No est√°s en un repositorio Git"
    exit 1
fi

# Verificar que los scripts existen
REQUIRED_SCRIPTS=("analyze_branches.sh" "migrate_excel_project.sh" "github_maintenance.sh")
for script in "${REQUIRED_SCRIPTS[@]}"; do
    if [[ ! -f "$script" ]]; then
        show_error "Script requerido no encontrado: $script"
        exit 1
    fi
done

# Hacer scripts ejecutables
chmod +x analyze_branches.sh migrate_excel_project.sh github_maintenance.sh

# Procesar argumentos
case "${1:-}" in
    --analyze)
        analyze_current_state
        ;;
    --migrate-excel)
        migrate_excel_project
        ;;
    --full-reorganize)
        full_reorganize
        ;;
    --maintenance)
        setup_maintenance
        ;;
    --demo)
        run_demo
        ;;
    --help|-h)
        show_help
        ;;
    *)
        echo -e "${BLUE}üéØ REORGANIZADOR MAESTRO DE REPOSITORIOS GITHUB${NC}"
        echo ""
        echo "Selecciona una opci√≥n:"
        echo ""
        echo "1. An√°lisis del estado actual"
        echo "2. Migraci√≥n del proyecto Excel/CSV"
        echo "3. Reorganizaci√≥n completa"
        echo "4. Configuraci√≥n de mantenimiento"
        echo "5. Demostraci√≥n (solo reportes)"
        echo "6. Ayuda"
        echo ""
        read -p "Opci√≥n (1-6): " -n 1 -r
        echo ""
        
        case $REPLY in
            1) analyze_current_state ;;
            2) migrate_excel_project ;;
            3) full_reorganize ;;
            4) setup_maintenance ;;
            5) run_demo ;;
            6) show_help ;;
            *) show_error "Opci√≥n no v√°lida" ;;
        esac
        ;;
esac

echo ""
echo -e "${GREEN}üéâ Proceso completado exitosamente${NC}"
echo ""
echo -e "${YELLOW}üìö DOCUMENTACI√ìN DISPONIBLE:${NC}"
echo "‚Ä¢ ORGANIZACION_REPOSITORIOS_GITHUB.md - Gu√≠a completa"
echo "‚Ä¢ .github/BRANCH_NAMING.md - Convenciones de nomenclatura"
echo "‚Ä¢ maintenance_log.txt - Log de actividades"
echo ""
echo -e "${YELLOW}üîó PR√ìXIMOS PASOS:${NC}"
echo "1. Revisar la documentaci√≥n generada"
echo "2. Crear repositorio excel-csv-search-tool en GitHub"
echo "3. Ejecutar migraci√≥n con la URL del nuevo repositorio"
echo "4. Configurar mantenimiento peri√≥dico"