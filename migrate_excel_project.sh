#!/bin/bash

# Script para migrar el proyecto Excel/CSV a un repositorio independiente
# Autor: Organizador de Repositorios GitHub

echo "üîÑ MIGRACI√ìN DEL PROYECTO EXCEL/CSV A REPOSITORIO INDEPENDIENTE"
echo "=============================================================="
echo ""

# Variables de configuraci√≥n
NEW_REPO_NAME="excel-csv-search-tool"
EXCEL_BRANCHES=(
    "cursor/bc-b2fec4da-d0d6-42f2-a257-456226942d45-5b25"
    "cursor/bc-7b2c1c9b-bcde-49f0-ae20-a5ae47f4266d-39c1"
    "cursor/bc-586f43a9-e5f5-4727-bcfb-1d53b417d9c7-cb90"
)

echo "üìã Configuraci√≥n de migraci√≥n:"
echo "   - Repositorio destino: $NEW_REPO_NAME"
echo "   - Ramas a migrar: ${#EXCEL_BRANCHES[@]}"
for branch in "${EXCEL_BRANCHES[@]}"; do
    echo "     * $branch"
done
echo ""

# Funci√≥n para mostrar ayuda
show_help() {
    echo "üõ†Ô∏è  PASOS PARA COMPLETAR LA MIGRACI√ìN:"
    echo ""
    echo "1. CREAR NUEVO REPOSITORIO EN GITHUB:"
    echo "   - Ve a https://github.com/new"
    echo "   - Nombre: $NEW_REPO_NAME"
    echo "   - Descripci√≥n: 'Herramienta web para b√∫squeda de texto en archivos Excel/CSV'"
    echo "   - P√∫blico/Privado: seg√∫n tu preferencia"
    echo "   - NO inicializar con README (lo haremos nosotros)"
    echo ""
    echo "2. EJECUTAR MIGRACI√ìN AUTOM√ÅTICA:"
    echo "   ./migrate_excel_project.sh --migrate https://github.com/tu-usuario/$NEW_REPO_NAME.git"
    echo ""
    echo "3. LIMPIAR RAMAS ORIGINALES:"
    echo "   ./migrate_excel_project.sh --cleanup"
    echo ""
}

# Funci√≥n para realizar la migraci√≥n
perform_migration() {
    local new_repo_url=$1
    
    echo "üöÄ Iniciando migraci√≥n a: $new_repo_url"
    echo ""
    
    # Crear directorio temporal para el nuevo repositorio
    TEMP_DIR=$(mktemp -d)
    echo "üìÅ Creando repositorio temporal en: $TEMP_DIR"
    
    cd "$TEMP_DIR"
    git init
    git remote add origin "$new_repo_url"
    
    # Obtener la rama principal del proyecto Excel/CSV
    echo "üì• Obteniendo rama principal del proyecto..."
    git fetch origin "${EXCEL_BRANCHES[0]}"
    git checkout -b main FETCH_HEAD
    
    # Crear README espec√≠fico para el proyecto
    cat > README.md << 'EOF'
# üîç Excel/CSV Search Tool

Herramienta web para b√∫squeda de texto en archivos Excel y CSV con interfaz intuitiva.

## üöÄ Caracter√≠sticas

- **M√∫ltiples formatos**: Soporte para CSV, XLS, XLSX
- **B√∫squeda flexible**: Buscar en columnas espec√≠ficas o en todo el archivo
- **Interfaz web**: F√°cil de usar desde el navegador
- **B√∫squeda sensible a may√∫sculas**: Opci√≥n configurable
- **Resultados con contexto**: Muestra informaci√≥n relevante de cada coincidencia

## üìã Instalaci√≥n R√°pida

```bash
# Instalar dependencias
pip install -r requirements.txt

# Ejecutar aplicaci√≥n
python app.py
```

## üåê Uso

1. Abrir navegador en `http://localhost:5000`
2. Subir archivo CSV/Excel
3. Especificar t√©rmino de b√∫squeda
4. Seleccionar columnas (opcional)
5. Ver resultados con contexto

## üõ†Ô∏è Tecnolog√≠as

- **Backend**: Flask, Pandas
- **Frontend**: HTML, CSS, JavaScript
- **Procesamiento**: NumPy, Werkzeug

## üìÅ Estructura

```
excel-csv-search-tool/
‚îú‚îÄ‚îÄ app.py              # Aplicaci√≥n principal Flask
‚îú‚îÄ‚îÄ config.py           # Configuraci√≥n
‚îú‚îÄ‚îÄ requirements.txt    # Dependencias
‚îú‚îÄ‚îÄ templates/          # Plantillas HTML
‚îú‚îÄ‚îÄ ejemplo_datos.csv   # Archivo de ejemplo
‚îî‚îÄ‚îÄ README.md          # Documentaci√≥n
```

## üîß Desarrollo

Este proyecto fue migrado desde el repositorio `clasificador_sistema_completo` para mantener mejor organizaci√≥n y enfoque espec√≠fico.

EOF
    
    # Commit inicial
    git add .
    git commit -m "feat: Migrate Excel/CSV search tool to independent repository

- Complete Flask web application for text search in Excel/CSV files
- Support for multiple file formats (CSV, XLS, XLSX)
- Flexible search with column selection
- Context-aware results display
- Clean and intuitive web interface"
    
    # Push a GitHub
    echo "‚¨ÜÔ∏è  Subiendo c√≥digo a GitHub..."
    git push -u origin main
    
    # Crear ramas adicionales si es necesario
    echo "üåø Creando ramas adicionales..."
    for branch in "${EXCEL_BRANCHES[@]:1}"; do
        echo "   Procesando rama: $branch"
        git fetch origin "$branch"
        branch_name=$(echo "$branch" | sed 's/cursor\///' | sed 's/bc-[a-f0-9-]*-/feature-/')
        git checkout -b "$branch_name" FETCH_HEAD
        git push -u origin "$branch_name"
    done
    
    # Volver al directorio original
    cd - > /dev/null
    
    # Limpiar directorio temporal
    rm -rf "$TEMP_DIR"
    
    echo "‚úÖ Migraci√≥n completada exitosamente!"
    echo "üåê Repositorio disponible en: $new_repo_url"
    echo ""
}

# Funci√≥n para limpiar ramas originales
cleanup_branches() {
    echo "üßπ LIMPIEZA DE RAMAS ORIGINALES"
    echo "==============================="
    echo ""
    
    echo "‚ö†Ô∏è  Las siguientes ramas ser√°n eliminadas del repositorio original:"
    for branch in "${EXCEL_BRANCHES[@]}"; do
        echo "   - $branch"
    done
    echo ""
    
    read -p "¬øConfirmas la eliminaci√≥n? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        for branch in "${EXCEL_BRANCHES[@]}"; do
            echo "üóëÔ∏è  Eliminando rama: $branch"
            git push origin --delete "$branch" 2>/dev/null || echo "   (Ya eliminada o no existe)"
        done
        echo "‚úÖ Limpieza completada"
    else
        echo "‚ùå Limpieza cancelada"
    fi
}

# Procesar argumentos
case "${1:-}" in
    --migrate)
        if [[ -z "$2" ]]; then
            echo "‚ùå Error: Debe especificar la URL del nuevo repositorio"
            echo "Uso: $0 --migrate https://github.com/usuario/repo.git"
            exit 1
        fi
        perform_migration "$2"
        ;;
    --cleanup)
        cleanup_branches
        ;;
    --help|-h)
        show_help
        ;;
    *)
        show_help
        ;;
esac